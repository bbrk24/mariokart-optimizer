// @ts-nocheck
'civet coffeePrototype'

data from ./data.civet
{ optimize, sum } from ./optimize.civet

limitedData .= structuredClone data

document.querySelector 'form'
    .addEventListener 'submit', (e) ->
        e.preventDefault()
        results := optimize
            {
                characters: limitedData.characters.filter .characters.#
                karts: limitedData.karts.filter .karts.#
                wheels: limitedData.wheels.filter .wheels.#
                gliders: limitedData.gliders.filter .gliders.#
            }
            {
                accel:
                    min: document.getElementById('accel-min').value |> Number
                    max: document.getElementById('accel-max').value |> Number
                    opt: document.getElementById('accel-opt').value
                handling:
                    land:
                        min: document.getElementById('land-handling-min').value |> Number
                        max: document.getElementById('land-handling-max').value |> Number
                        opt: document.getElementById('land-handling-opt').value
                    water:
                        min: document.getElementById('water-handling-min').value |> Number
                        max: document.getElementById('water-handling-max').value |> Number
                        opt: document.getElementById('water-handling-opt').value
                    air:
                        min: document.getElementById('air-handling-min').value |> Number
                        max: document.getElementById('air-handling-max').value |> Number
                        opt: document.getElementById('air-handling-opt').value
                    antigrav:
                        min: document.getElementById('antigrav-handling-min').value |> Number
                        max: document.getElementById('antigrav-handling-max').value |> Number
                        opt: document.getElementById('antigrav-handling-opt').value
                invuln:
                    min: document.getElementById('invuln-min').value |> Number
                    max: document.getElementById('invuln-max').value |> Number
                    opt: document.getElementById('invuln-opt').value
                miniTurbo:
                    min: document.getElementById('mini-turbo-min').value |> Number
                    max: document.getElementById('mini-turbo-max').value |> Number
                    opt: document.getElementById('mini-turbo-opt').value
                speed:
                    land:
                        min: document.getElementById('land-speed-min').value |> Number
                        max: document.getElementById('land-speed-max').value |> Number
                        opt: document.getElementById('land-speed-opt').value
                    water:
                        min: document.getElementById('water-speed-min').value |> Number
                        max: document.getElementById('water-speed-max').value |> Number
                        opt: document.getElementById('water-speed-opt').value
                    air:
                        min: document.getElementById('air-speed-min').value |> Number
                        max: document.getElementById('air-speed-max').value |> Number
                        opt: document.getElementById('air-speed-opt').value
                    antigrav:
                        min: document.getElementById('antigrav-speed-min').value |> Number
                        max: document.getElementById('antigrav-speed-max').value |> Number
                        opt: document.getElementById('antigrav-speed-opt').value
                traction:
                    min: document.getElementById('traction-min').value |> Number
                    max: document.getElementById('traction-max').value |> Number
                    opt: document.getElementById('traction-opt').value
                weight: 
                    min: document.getElementById('weight-min').value |> Number
                    max: document.getElementById('weight-max').value |> Number
                    opt: document.getElementById('weight-opt').value
            }
            document.getElementById('inward-drift').value
        document.getElementById('output').innerHTML = results
            .map (el) => `<tr><td>${
                [el.0.characters, el.1.karts, el.2.wheels, el.3.gliders
                    ].map(
                        .map((name) => `<img src="./img/${name}.png" alt="${name}"/>`).join ' '
                    ).join '</td><td>'
            }</td></tr>`
            .join ''
        if results.# > 0
            setPreviewedKart
                results.0.0.characters.0
                results.0.1.karts.0
                results.0.2.wheels.0
                results.0.3.gliders.0

kartPreview := document.getElementById 'kart-preview'
kartPreview.innerHTML = ''

rgx := /(?<=[^A-Z])[A-Z]|(?!^)[A-Z][a-z]|(?<=\D)\d/g

characterLabel := document.createElement 'label'
characterLabel.textContent = 'Character'
characterDropdown := document.createElement 'select'
characterLabel.htmlFor = characterDropdown.id = 'character-select'
for each statBlock, i of data.characters
    for name of statBlock.characters
        document.createElement 'option'
            ||> .value = i
            ||> .textContent = name.replace rgx, ' $&'
            |> characterDropdown.appendChild
kartPreview.appendChild characterLabel
kartPreview.append ' '
kartPreview.appendChild characterDropdown
characterImg := document.createElement 'img' ||> kartPreview.appendChild 
kartPreview.appendChild document.createElement 'br'

kartLabel := document.createElement 'label'
kartLabel.textContent = 'Kart'
kartDropdown := document.createElement 'select'
kartLabel.htmlFor = kartDropdown.id = 'kart-select'
for each statBlock, i of data.karts
    for name of statBlock.karts
        document.createElement 'option'
            ||> .value = i
            ||> .textContent = name.replace rgx, ' $&'
            |> kartDropdown.appendChild
kartPreview.appendChild kartLabel
kartPreview.append ' '
kartPreview.appendChild kartDropdown
kartImg := document.createElement 'img' ||> kartPreview.appendChild 
kartPreview.appendChild document.createElement 'br'

wheelLabel := document.createElement 'label'
wheelLabel.textContent = 'Wheels'
wheelDropdown := document.createElement 'select'
wheelLabel.htmlFor = wheelDropdown.id = 'wheel-select'
for each statBlock, i of data.wheels
    for name of statBlock.wheels
        document.createElement 'option'
            ||> .value = i
            ||> .textContent = name.replace rgx, ' $&'
            |> wheelDropdown.appendChild
kartPreview.appendChild wheelLabel
kartPreview.append ' '
kartPreview.appendChild wheelDropdown
wheelImg := document.createElement 'img' ||> kartPreview.appendChild 
kartPreview.appendChild document.createElement 'br'

gliderLabel := document.createElement 'label'
gliderLabel.textContent = 'Glider'
gliderDropdown := document.createElement 'select'
gliderLabel.htmlFor = gliderDropdown.id = 'glider-select'
for each statBlock, i of data.gliders
    for name of statBlock.gliders
        document.createElement 'option'
            ||> .value = i
            ||> .textContent = name.replace rgx, ' $&'
            |> gliderDropdown.appendChild
kartPreview.appendChild gliderLabel
kartPreview.append ' '
kartPreview.appendChild gliderDropdown
gliderImg := document.createElement 'img' ||> kartPreview.appendChild 
kartPreview.appendChild document.createElement 'br'

kartPreview.appendChild document.createElement 'br'

statsDisplay := document.createElement 'div'
    ||> .id = 'stats-display'
    ||> kartPreview.appendChild

makeMeter := (id: string, value: number) =>
    document.createElement 'div'
        ||> .className = 'meter'
        ||> .id = id
        ||> .style = `--meter-length: ${value * 100/6}%;`
        |> .outerHTML

rivalsDiv := document.createElement 'div'
    ||> .id = 'rivals'
    ||> .append 'Rivals'

rivalInfoString := 'When playing as P1 in a Grand Prix, these characters are guaranteed to be COM characters and should be better than other COMs, unless they are chosen by other players. Not all characters have rivals.'

document.createElement 'sup'
    ||> .textContent = '\ufe0e\u2139'
    ||> .className = 'info'
    ||> .title = rivalInfoString
    ||> .addEventListener
        'click'
        -> alert rivalInfoString
        { +passive }
    ||> rivalsDiv.appendChild
rivalsDiv.append ': '

rivalImgContainer := document.createElement 'span'
    ||> rivalsDiv.appendChild

updatePreview := :void =>
    character := data.characters[characterDropdown.value]
    characterName := Array::find.call(characterDropdown.options, .selected).textContent.replaceAll ' ', ''
    characterImg.src = `./img/${characterName}.png`
    kart := data.karts[kartDropdown.value]
    kartImg.src = `./img/${Array::find.call(kartDropdown.options, .selected).textContent.replaceAll ' ', ''}.png`
    wheel := data.wheels[wheelDropdown.value]
    wheelImg.src = `./img/${Array::find.call(wheelDropdown.options, .selected).textContent.replaceAll ' ', ''}.png`
    glider := data.gliders[gliderDropdown.value]
    gliderImg.src = `./img/${Array::find.call(gliderDropdown.options, .selected).textContent.replaceAll ' ', ''}.png`
    statBlock := sum character, kart, wheel, glider
    statsDisplay.innerHTML = ```
        <table><tbody>
        <tr><td><label for="land-speed-prev">Land speed</label></td><td>${makeMeter 'land-speed-prev', statBlock.speed.land}</td><td>${statBlock.speed.land}</td></tr>
        <tr><td><label for="water-speed-prev">Water speed</label></td><td>${makeMeter 'water-speed-prev', statBlock.speed.water}</td><td>${statBlock.speed.water}</td></tr>
        <tr><td><label for="air-speed-prev">Air speed</label></td><td>${makeMeter 'air-speed-prev', statBlock.speed.air}</td><td>${statBlock.speed.air}</td></tr>
        <tr><td><label for="antigrav-speed-prev">Antigravity speed</label></td><td>${makeMeter 'antigrav-speed-prev', statBlock.speed.antigrav}</td><td>${statBlock.speed.antigrav}</td></tr>
        <tr><td><label for="accel-prev">Acceleration</label></td><td>${makeMeter 'accel-prev', statBlock.accel}</td><td>${statBlock.accel}</td></tr>
        <tr><td><label for="weight-prev">Weight</label></td><td>${makeMeter 'weight-prev', statBlock.weight}</td><td>${statBlock.weight}</td></tr>
        <tr><td><label for="land-handling-prev">Land handling</label></td><td>${makeMeter 'land-handling-prev', statBlock.handling.land}</td><td>${statBlock.handling.land}</td></tr>
        <tr><td><label for="water-handling-prev">Water handling</label></td><td>${makeMeter 'water-handling-prev', statBlock.handling.water}</td><td>${statBlock.handling.water}</td></tr>
        <tr><td><label for="air-handling-prev">Air handling</label></td><td>${makeMeter 'air-handling-prev', statBlock.handling.air}</td><td>${statBlock.handling.air}</td></tr>
        <tr><td><label for="antigrav-handling-prev">Antigravity handling</label></td><td>${makeMeter 'antigrav-handling-prev', statBlock.handling.antigrav}</td><td>${statBlock.handling.antigrav}</td></tr>
        <tr><td><label for="traction-prev">Traction</label></td><td>${makeMeter 'traction-prev', statBlock.traction}</td><td>${statBlock.traction}</td></tr>
        <tr><td><label for="mini-turbo-prev">Mini-Turbo</label></td><td>${makeMeter 'mini-turbo-prev', statBlock.miniTurbo}</td><td>${statBlock.miniTurbo}</td></tr>
        <tr><td><label for="invuln-prev">Invulnerability</label></td><td>${makeMeter 'invuln-prev', statBlock.invuln}</td><td>${statBlock.invuln}</td></tr>
        </tbody></table>
        ```
    statsDisplay.appendChild rivalsDiv
    rivalImgContainer.innerHTML = ''
    for rival of data.rivals[characterName]
        document.createElement 'img'
            ||> .alt = rival.replace rgx, ' $&'
            ||> .src = `./img/${rival}.png`
            ||> rivalImgContainer.appendChild

updatePreview()

[characterDropdown, kartDropdown, wheelDropdown, gliderDropdown].forEach .addEventListener 'change', updatePreview, { +passive }

function setPreviewedKart(character: string, kart: string, wheels: string, glider: string)
    characterDropdown.selectedIndex = Array::findIndex.call characterDropdown.options, &.textContent.replaceAll(' ', '') is character
    kartDropdown.selectedIndex = Array::findIndex.call kartDropdown.options, &.textContent.replaceAll(' ', '') is kart
    wheelDropdown.selectedIndex = Array::findIndex.call wheelDropdown.options, &.textContent.replaceAll(' ', '') is wheels
    gliderDropdown.selectedIndex = Array::findIndex.call gliderDropdown.options, &.textContent.replaceAll(' ', '') is glider
    updatePreview()

menu := document.querySelector 'menu'
let currMenu?: string

installLimitListener := (name: 'characters' | 'karts' | 'wheels' | 'gliders') =>
    document.getElementById `limit-${name}`
        .addEventListener 'click', :void ->
            menu.innerHTML = ''
            if currMenu is name
                currMenu = undefined
            else
                currMenu = name
                totalNames := data[name].flatMap &[name]
                indices := data[name].flatMap (el, i) => Array(el[name].#).fill i
                includedNames := limitedData[name].flatMap &[name]

                total := totalNames.#
                selectedCount .= includedNames.#
                allCheckbox := document.createElement 'input'
                    ||> .type = 'checkbox'
                    ||> .addEventListener
                        'change'
                        ->
                            if @checked
                                document.querySelectorAll '[type="checkbox"]'
                                    .forEach .checked = true
                                limitedData[name] = structuredClone data[name]
                                selectedCount = total
                            else
                                document.querySelectorAll '[type="checkbox"]'
                                    .forEach .checked = false
                                limitedData[name].forEach &[name] = []
                                selectedCount = 0
                        { +passive }
                    ||> menu.appendChild

                switch selectedCount
                    when 0
                        allCheckbox.checked = false
                    when total
                        allCheckbox.checked = true
                    else
                        allCheckbox.indeterminate = true

                document.createElement 'label'
                    ||> .textContent = 'All'
                    ||> .htmlFor = allCheckbox.id = 'checkbox-all'
                    |> menu.appendChild

                for each currName, i of totalNames
                    li := document.createElement 'li'
                    checkBox := document.createElement 'input'
                        ||> .type = 'checkbox'
                    checkBox.checked = (currName is in includedNames)
                    index := indices[i]
                    checkBox.addEventListener 'change', ->
                        if @checked
                            limitedData[name][index][name].push currName
                            ++selectedCount
                            if selectedCount is total
                                // why do I have to do both
                                allCheckbox.indeterminate = false
                                allCheckbox.checked = true
                            else
                                allCheckbox.indeterminate = true
                        else
                            idx := limitedData[name][index][name].indexOf currName
                            if idx >= 0
                                limitedData[name][index][name].splice idx, 1
                                --selectedCount
                                if selectedCount is 0
                                    allCheckbox.indeterminate = false
                                    allCheckbox.checked = false
                                else
                                    allCheckbox.indeterminate = true

                    label := document.createElement 'label'
                    label.htmlFor = checkBox.id = `checkbox-${currName}`
                    label.textContent = currName.replace rgx, ' $&'

                    li.appendChild checkBox
                    li.appendChild label
                    menu.appendChild li

['characters', 'karts', 'wheels', 'gliders'].forEach installLimitListener

document.querySelector 'button[type="reset"]'
    .addEventListener 'click', ->
        limitedData = structuredClone data
        menu.innerHTML = ''
        currMenu = undefined
