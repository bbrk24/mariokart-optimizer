'civet coffeePrototype'

data from ./data.civet
{ optimize, sum } from ./optimize.civet
getFormValues from ./getFormValues.civet
type { BaseStatBlock } from ./yamlTypes.civet

limitedData .= structuredClone data

rgx := /(?<=[^A-Z])[A-Z]|(?!^)[A-Z][a-z]|(?<=\D)\d/g

form := document.querySelector('form')!
form.addEventListener 'submit', (e) =>
    e.preventDefault()
    results := optimize
        {
            characters: limitedData.characters.filter .characters.#
            karts: limitedData.karts.filter .karts.#
            wheels: limitedData.wheels.filter .wheels.#
            gliders: limitedData.gliders.filter .gliders.#
        }
        getFormValues()
        // @ts-expect-error I have neither the time nor the crayons to fix this line
        document.getElementById('inward-drift').value
    document.getElementById('output')!.innerHTML = results
        .map (el) => `<tr><td>${
            [el.0.characters, el.1.karts, el.2.wheels, el.3.gliders
                ].map(
                    .map((name) => `<img src="./img/${name}.png" alt="${name}" title="${name.replace rgx, ' $&'}"/>`).join ' '
                ).join '</td><td>'
        }</td></tr>`
        .join ''
    if results.# > 0
        setPreviewedKart
            results.0.0.characters.0
            results.0.1.karts.0
            results.0.2.wheels.0
            results.0.3.gliders.0

kartPreview := document.getElementById('kart-preview')!
kartPreview.innerHTML = ''

characterLabel := document.createElement 'label'
characterLabel.textContent = 'Character'
characterDropdown := document.createElement 'select'
characterLabel.htmlFor = characterDropdown.id = 'character-select'
for each statBlock, i of data.characters
    for name of statBlock.characters
        document.createElement 'option'
            ||> .value = String i
            ||> .text = name.replace rgx, ' $&'
            |> characterDropdown.appendChild
kartPreview.appendChild characterLabel
kartPreview.append ' '
kartPreview.appendChild characterDropdown
characterImg := document.createElement 'img' |> kartPreview.appendChild 
kartPreview.appendChild document.createElement 'br'

kartLabel := document.createElement 'label'
kartLabel.textContent = 'Kart'
kartDropdown := document.createElement 'select'
kartLabel.htmlFor = kartDropdown.id = 'kart-select'
for each statBlock, i of data.karts
    for name of statBlock.karts
        document.createElement 'option'
            ||> .value = String i
            ||> .text = name.replace rgx, ' $&'
            |> kartDropdown.appendChild
kartPreview.appendChild kartLabel
kartPreview.append ' '
kartPreview.appendChild kartDropdown
kartImg := document.createElement 'img' |> kartPreview.appendChild 
kartPreview.appendChild document.createElement 'br'

wheelLabel := document.createElement 'label'
wheelLabel.textContent = 'Wheels'
wheelDropdown := document.createElement 'select'
wheelLabel.htmlFor = wheelDropdown.id = 'wheel-select'
for each statBlock, i of data.wheels
    for name of statBlock.wheels
        document.createElement 'option'
            ||> .value = String i
            ||> .text = name.replace rgx, ' $&'
            |> wheelDropdown.appendChild
kartPreview.appendChild wheelLabel
kartPreview.append ' '
kartPreview.appendChild wheelDropdown
wheelImg := document.createElement 'img' |> kartPreview.appendChild 
kartPreview.appendChild document.createElement 'br'

gliderLabel := document.createElement 'label'
gliderLabel.textContent = 'Glider'
gliderDropdown := document.createElement 'select'
gliderLabel.htmlFor = gliderDropdown.id = 'glider-select'
for each statBlock, i of data.gliders
    for name of statBlock.gliders
        document.createElement 'option'
            ||> .value = String i
            ||> .text = name.replace rgx, ' $&'
            |> gliderDropdown.appendChild
kartPreview.appendChild gliderLabel
kartPreview.append ' '
kartPreview.appendChild gliderDropdown
gliderImg := document.createElement 'img' |> kartPreview.appendChild 
kartPreview.appendChild document.createElement 'br'

kartPreview.appendChild document.createElement 'br'

statsDisplay := document.createElement 'div'
    ||> .id = 'stats-display'
    |> kartPreview.appendChild

makeMeter := (id: string, value: number) =>
    document.createElement 'div'
        ||> .className = 'meter'
        ||> .id = id
        ||> .style.cssText = `--meter-length: ${value * 100/6}%;`
        |> .outerHTML

rivalsDiv := document.createElement 'div'
    ||> .id = 'rivals'
    ||> .append 'Rivals'

rivalInfoString := 'When playing as P1 in a Grand Prix, these characters are guaranteed to be COM characters and should be better than other COMs, unless they are chosen by other players. Not all characters have rivals.'

document.createElement 'sup'
    ||> .className = 'info'
    ||> .title = rivalInfoString
    |> rivalsDiv.appendChild
rivalsDiv.append ': '

rivalImgContainer := document.createElement 'span' |> rivalsDiv.appendChild

updatePreview := :void =>
    try
        rivalImgContainer.innerHTML = ''
        characterName := Array::find.call(characterDropdown.options, .selected).text.replaceAll ' ', ''
        characterImg.src = `./img/${characterName}.png`
        try for rival of data.rivals[characterName]
            document.createElement 'img'
                ||> .alt = rival.replace rgx, ' $&'
                ||> .src = `./img/${rival}.png`
                |> rivalImgContainer.appendChild
    catch
        characterImg.src = './img/unknown.png'

    character := try data.characters[+characterDropdown.value]
    kart := try data.karts[+kartDropdown.value]
    wheel := try data.wheels[+wheelDropdown.value]
    glider := try data.gliders[+gliderDropdown.value]

    imgError .= false
    try 
        kartImg.src = `./img/${Array::find.call(kartDropdown.options, .selected).text.replaceAll ' ', ''}.png`
    catch
        kartImg.src = './img/unknown.png'
        imgError = true
    try
        wheelImg.src = `./img/${Array::find.call(wheelDropdown.options, .selected).text.replaceAll ' ', ''}.png`
    catch
        wheelImg.src = './img/unknown.png'
        imgError = true
    try
        gliderImg.src = `./img/${Array::find.call(gliderDropdown.options, .selected).text.replaceAll ' ', ''}.png`
    catch
        gliderImg.src = './img/unknown.png'
        imgError = true

    unless character? and kart? and wheel? and glider? and not imgError
        document.querySelectorAll<HTMLElement> '.meter'
            .forEach .style.cssText = ''
        statsDisplay.querySelectorAll<HTMLTableCellElement> 'td:last-child'
            .forEach .innerHTML = ''
        return

    statBlock := sum<BaseStatBlock> character, kart, wheel, glider
    statsDisplay.innerHTML = ```
        <table><tbody>
        <tr><td><label for="land-speed-prev">Land speed</label></td><td>${makeMeter 'land-speed-prev', statBlock.speed.land}</td><td>${statBlock.speed.land}</td></tr>
        <tr><td><label for="water-speed-prev">Water speed</label></td><td>${makeMeter 'water-speed-prev', statBlock.speed.water}</td><td>${statBlock.speed.water}</td></tr>
        <tr><td><label for="air-speed-prev">Air speed</label></td><td>${makeMeter 'air-speed-prev', statBlock.speed.air}</td><td>${statBlock.speed.air}</td></tr>
        <tr><td><label for="antigrav-speed-prev">Antigravity speed</label></td><td>${makeMeter 'antigrav-speed-prev', statBlock.speed.antigrav}</td><td>${statBlock.speed.antigrav}</td></tr>
        <tr><td><label for="accel-prev">Acceleration</label></td><td>${makeMeter 'accel-prev', statBlock.accel}</td><td>${statBlock.accel}</td></tr>
        <tr><td><label for="weight-prev">Weight</label></td><td>${makeMeter 'weight-prev', statBlock.weight}</td><td>${statBlock.weight}</td></tr>
        <tr><td><label for="land-handling-prev">Land handling</label></td><td>${makeMeter 'land-handling-prev', statBlock.handling.land}</td><td>${statBlock.handling.land}</td></tr>
        <tr><td><label for="water-handling-prev">Water handling</label></td><td>${makeMeter 'water-handling-prev', statBlock.handling.water}</td><td>${statBlock.handling.water}</td></tr>
        <tr><td><label for="air-handling-prev">Air handling</label></td><td>${makeMeter 'air-handling-prev', statBlock.handling.air}</td><td>${statBlock.handling.air}</td></tr>
        <tr><td><label for="antigrav-handling-prev">Antigravity handling</label></td><td>${makeMeter 'antigrav-handling-prev', statBlock.handling.antigrav}</td><td>${statBlock.handling.antigrav}</td></tr>
        <tr><td><label for="traction-prev">Traction</label></td><td>${makeMeter 'traction-prev', statBlock.traction}</td><td>${statBlock.traction}</td></tr>
        <tr><td><label for="mini-turbo-prev">Mini-Turbo</label></td><td>${makeMeter 'mini-turbo-prev', statBlock.miniTurbo}</td><td>${statBlock.miniTurbo}</td></tr>
        <tr><td><label for="invuln-prev">Invulnerability</label></td><td>${makeMeter 'invuln-prev', statBlock.invuln}</td><td>${statBlock.invuln}</td></tr>
        </tbody></table>
        ```
    statsDisplay.appendChild rivalsDiv

updatePreview()

[characterDropdown, kartDropdown, wheelDropdown, gliderDropdown].forEach .addEventListener 'change', updatePreview, { +passive }

function setPreviewedKart(character: string, kart: string, wheels: string, glider: string)
    characterDropdown.selectedIndex = Array::findIndex.call characterDropdown.options, .text.replaceAll(' ', '') is character
    kartDropdown.selectedIndex = Array::findIndex.call kartDropdown.options, .text.replaceAll(' ', '') is kart
    wheelDropdown.selectedIndex = Array::findIndex.call wheelDropdown.options, .text.replaceAll(' ', '') is wheels
    gliderDropdown.selectedIndex = Array::findIndex.call gliderDropdown.options, .text.replaceAll(' ', '') is glider
    updatePreview()

menu := document.querySelector('menu')!
let currMenu?: string

installLimitListener := (name: 'characters' | 'karts' | 'wheels' | 'gliders') =>
    document.getElementById(`limit-${name}`)!
        .addEventListener
            'click',
            :void =>
                menu.innerHTML = ''
                if currMenu is name
                    currMenu = undefined
                else
                    // Due to the structure of the data, what I'm doing is safe, but TS can't prove it.
                    // Unfortunately, I need to remind it of such no fewer than five times.

                    currMenu = name
                    // @ts-ignore shut up
                    totalNames: string[] := data[name].flatMap &[name]
                    // @ts-ignore shut up
                    indices := data[name].flatMap (el, i) => Array<number>(el[name].#).fill i
                    // @ts-ignore shut up
                    includedNames: string[] := limitedData[name].flatMap &[name]

                    total := totalNames.#
                    selectedCount .= includedNames.#
                    allCheckbox := document.createElement 'input'
                        ||> .type = 'checkbox'
                        ||> .addEventListener
                            'change'
                            ->
                                if @checked
                                    menu.querySelectorAll<HTMLInputElement> 'input[type="checkbox"]'
                                        .forEach .checked = true
                                    // @ts-ignore It's just not correlating the LHS (&) with the RHS (|)
                                    limitedData[name] = structuredClone data[name]
                                    selectedCount = total
                                else
                                    menu.querySelectorAll<HTMLInputElement> 'input[type="checkbox"]'
                                        .forEach .checked = false
                                    // @ts-ignore shut up
                                    limitedData[name].forEach &[name] = []
                                    selectedCount = 0
                            { +passive }
                        |> menu.appendChild

                    switch selectedCount
                        when 0
                            allCheckbox.checked = false
                        when total
                            allCheckbox.checked = true
                        else
                            allCheckbox.indeterminate = true

                    document.createElement 'label'
                        ||> .textContent = 'All'
                        ||> .htmlFor = allCheckbox.id = 'checkbox-all'
                        |> menu.appendChild

                    for each currName, i of totalNames
                        li := document.createElement 'li'
                        checkBox := document.createElement 'input' ||> .type = 'checkbox'
                        checkBox.checked = (currName is in includedNames)
                        index := indices[i]
                        checkBox.addEventListener 'change', ->
                            // @ts-ignore shut up
                            limitedNames: string[] := limitedData[name][index][name]
                            if @checked
                                limitedNames.push currName
                                ++selectedCount
                                if selectedCount is total
                                    // why do I have to do both
                                    allCheckbox.indeterminate = false
                                    allCheckbox.checked = true
                                else
                                    allCheckbox.indeterminate = true
                            else
                                idx := limitedNames.indexOf currName
                                if idx >= 0
                                    limitedNames.splice idx, 1
                                    --selectedCount
                                    if selectedCount is 0
                                        allCheckbox.indeterminate = false
                                        allCheckbox.checked = false
                                    else
                                        allCheckbox.indeterminate = true

                        label := document.createElement 'label'
                        label.htmlFor = checkBox.id = `checkbox-${currName}`
                        label.textContent = currName.replace rgx, ' $&'

                        li.appendChild checkBox
                        li.appendChild label
                        menu.appendChild li
            { +passive }

(['characters', 'karts', 'wheels', 'gliders'] as const).forEach installLimitListener

form.addEventListener
    'reset'
    =>
        limitedData = structuredClone data
        menu.innerHTML = ''
        currMenu = undefined
    { +passive }

document.querySelectorAll<HTMLElement> '.info'
    .forEach .addEventListener
        'click'
        -> alert @title
        { +passive }
