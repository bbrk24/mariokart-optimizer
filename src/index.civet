'civet coffeePrototype'

data from ./data.civet
{ optimize, sum } from ./optimize.civet
getFormValues from ./getFormValues.civet
cache from ./imageCache.civet
type { BaseStatBlock } from ./yamlTypes.civet

limitedData .= structuredClone data

rgx := /(?<=[^A-Z])[A-Z]|(?!^)[A-Z][a-z]|(?<=\D)\d/g

form := document.querySelector('form')!
output := document.getElementById('output')!
let timeoutID?: number
form.addEventListener 'submit', (e) =>
    e.preventDefault()
    if timeoutID?
        clearTimeout timeoutID
        timeoutID = undefined

    results := optimize
        {
            characters: limitedData.characters.filter .characters.#
            karts: limitedData.karts.filter .karts.#
            wheels: limitedData.wheels.filter .wheels.#
            gliders: limitedData.gliders.filter .gliders.#
        }
        getFormValues()
        // @ts-expect-error I have neither the time nor the crayons to fix this line
        document.getElementById('inward-drift').value

    if results.# > 0
        setPreviewedKart
            results.0.0.characters.0
            results.0.1.karts.0
            results.0.2.wheels.0
            results.0.3.gliders.0

    output.innerHTML = ''
    // If there's lots of results, this can take a couple seconds. So batch it and give the UI a chance to catch up.
    appendPartialResults := (startIndex: number): void =>
        batchSize := 1000
        for i of [startIndex...(startIndex + batchSize)]
            if i >= results.#
                timeoutID = undefined
                return
            el := results[i]

            tr := document.createElement 'tr'
            for names of [el.0.characters, el.1.karts, el.2.wheels, el.3.gliders]
                document.createElement 'td'
                    ||> .append ...names.map cache@getImage
                    |> tr.appendChild
            output.appendChild tr
        // 4 is the minimum timeout for chained timeouts
        timeoutID = setTimeout appendPartialResults, 4, batchSize + startIndex
    appendPartialResults 0

kartPreview := document.getElementById('kart-preview')!
kartPreview.textContent = ''

characterLabel := document.createElement 'label'
characterLabel.textContent = 'Character'
characterDropdown := document.createElement 'select'
characterLabel.htmlFor = characterDropdown.id = 'character-select'
for each statBlock, i of data.characters
    for name of statBlock.characters
        document.createElement 'option'
            ||> .value = String i
            ||> .dataset.name = name
            ||> .text = name.replace rgx, ' $&'
            |> characterDropdown.appendChild
kartPreview.append characterLabel, ' ', characterDropdown
characterImg := document.createElement 'img' |> kartPreview.appendChild 
kartPreview.appendChild document.createElement 'br'

kartLabel := document.createElement 'label'
kartLabel.textContent = 'Kart'
kartDropdown := document.createElement 'select'
kartLabel.htmlFor = kartDropdown.id = 'kart-select'
for each statBlock, i of data.karts
    for name of statBlock.karts
        document.createElement 'option'
            ||> .value = String i
            ||> .dataset.name = name
            ||> .text = name.replace rgx, ' $&'
            |> kartDropdown.appendChild
kartPreview.append kartLabel, ' ', kartDropdown
kartImg := document.createElement 'img' |> kartPreview.appendChild 
kartPreview.appendChild document.createElement 'br'

wheelLabel := document.createElement 'label'
wheelLabel.textContent = 'Wheels'
wheelDropdown := document.createElement 'select'
wheelLabel.htmlFor = wheelDropdown.id = 'wheel-select'
for each statBlock, i of data.wheels
    for name of statBlock.wheels
        document.createElement 'option'
            ||> .value = String i
            ||> .dataset.name = name
            ||> .text = name.replace rgx, ' $&'
            |> wheelDropdown.appendChild
kartPreview.append wheelLabel, ' ', wheelDropdown
wheelImg := document.createElement 'img' |> kartPreview.appendChild 
kartPreview.appendChild document.createElement 'br'

gliderLabel := document.createElement 'label'
gliderLabel.textContent = 'Glider'
gliderDropdown := document.createElement 'select'
gliderLabel.htmlFor = gliderDropdown.id = 'glider-select'
for each statBlock, i of data.gliders
    for name of statBlock.gliders
        document.createElement 'option'
            ||> .value = String i
            ||> .dataset.name = name
            ||> .text = name.replace rgx, ' $&'
            |> gliderDropdown.appendChild
kartPreview.append gliderLabel, ' ', gliderDropdown
gliderImg := document.createElement 'img' |> kartPreview.appendChild 
kartPreview.appendChild document.createElement 'br'

kartPreview.appendChild document.createElement 'br'

rivalsDiv := document.getElementById('rivals') as HTMLDivElement
rivalImgContainer := document.createElement 'span' |> rivalsDiv.appendChild

landSpeedMeter := document.getElementById('land-speed-prev')!
waterSpeedMeter := document.getElementById('water-speed-prev')!
airSpeedMeter := document.getElementById('air-speed-prev')!
antigravSpeedMeter := document.getElementById('antigrav-speed-prev')!
accelMeter := document.getElementById('accel-prev')!
weightMeter := document.getElementById('weight-prev')!
landHandlingMeter := document.getElementById('land-handling-prev')!
waterHandlingMeter := document.getElementById('water-handling-prev')!
airHandlingMeter := document.getElementById('air-handling-prev')!
antigravHandlingMeter := document.getElementById('antigrav-handling-prev')!
tractionMeter := document.getElementById('traction-prev')!
miniTurboMeter := document.getElementById('mini-turbo-prev')!
invulnMeter := document.getElementById('invuln-prev')!

updatePreview := :void =>
    character?: BaseStatBlock := data.characters[+characterDropdown.value]
    kart?: BaseStatBlock := data.karts[+kartDropdown.value]
    wheel?: BaseStatBlock := data.wheels[+wheelDropdown.value]
    glider?: BaseStatBlock := data.gliders[+gliderDropdown.value]

    rivalImgContainer.innerHTML = ''
    imgError .= false

    if characterName := characterDropdown.selectedOptions.0?.dataset.name
        characterImg.src = `./img/${characterName}.png`
        for rival of data.rivals[characterName]
            rival |> cache.getImage |> rivalImgContainer.appendChild
    else
        characterImg.src = './img/unknown.png'
        imgError = true

    if kartName := kartDropdown.selectedOptions.0?.dataset.name
        kartImg.src = `./img/${kartName}.png`
    else
        kartImg.src = './img/unknown.png'
        imgError = true
    if wheelName := wheelDropdown.selectedOptions.0?.dataset.name
        wheelImg.src = `./img/${wheelName}.png`
    else
        wheelImg.src = './img/unknown.png'
        imgError = true
    if gliderName := gliderDropdown.selectedOptions.0?.dataset.name
        gliderImg.src = `./img/${gliderName}.png`
    else
        gliderImg.src = './img/unknown.png'
        imgError = true

    unless character? and kart? and wheel? and glider? and not imgError
        document.querySelectorAll<HTMLElement> '.meter'
            .forEach (meter): void =>
                meter.style.removeProperty '--meter-length'
                meter.ariaValueNow = null
        document.querySelectorAll<HTMLTableCellElement> '#stats-display td:last-child'
            .forEach .textContent = ''
        return

    statBlock := sum character, kart, wheel, glider
    landSpeedMeter.style.setProperty '--meter-length', `${statBlock.speed.land * 100/6}%`
    document.getElementById('land-speed-value')!.textContent = landSpeedMeter.ariaValueNow = String statBlock.speed.land
    waterSpeedMeter.style.setProperty '--meter-length', `${statBlock.speed.water * 100/6}%`
    document.getElementById('water-speed-value')!.textContent = waterSpeedMeter.ariaValueNow = String statBlock.speed.water
    airSpeedMeter.style.setProperty '--meter-length', `${statBlock.speed.air * 100/6}%`
    document.getElementById('air-speed-value')!.textContent = airSpeedMeter.ariaValueNow = String statBlock.speed.air
    antigravSpeedMeter.style.setProperty '--meter-length', `${statBlock.speed.antigrav * 100/6}%`
    document.getElementById('antigrav-speed-value')!.textContent = antigravSpeedMeter.ariaValueNow = String statBlock.speed.antigrav
    accelMeter.style.setProperty '--meter-length', `${statBlock.accel * 100/6}%`
    document.getElementById('accel-value')!.textContent = accelMeter.ariaValueNow = String statBlock.accel
    weightMeter.style.setProperty '--meter-length', `${statBlock.weight * 100/6}%`
    document.getElementById('weight-value')!.textContent = weightMeter.ariaValueNow = String statBlock.weight
    landHandlingMeter.style.setProperty '--meter-length', `${statBlock.handling.land * 100/6}%`
    document.getElementById('land-handling-value')!.textContent = landHandlingMeter.ariaValueNow = String statBlock.handling.land
    waterHandlingMeter.style.setProperty '--meter-length', `${statBlock.handling.water * 100/6}%`
    document.getElementById('water-handling-value')!.textContent = waterHandlingMeter.ariaValueNow = String statBlock.handling.water
    airHandlingMeter.style.setProperty '--meter-length', `${statBlock.handling.air * 100/6}%`
    document.getElementById('air-handling-value')!.textContent = airHandlingMeter.ariaValueNow = String statBlock.handling.air
    antigravHandlingMeter.style.setProperty '--meter-length', `${statBlock.handling.antigrav * 100/6}%`
    document.getElementById('antigrav-handling-value')!.textContent = antigravHandlingMeter.ariaValueNow = String statBlock.handling.antigrav
    tractionMeter.style.setProperty '--meter-length', `${statBlock.traction * 100/6}%`
    document.getElementById('traction-value')!.textContent = tractionMeter.ariaValueNow = String statBlock.traction
    miniTurboMeter.style.setProperty '--meter-length', `${statBlock.miniTurbo * 100/6}%`
    document.getElementById('mini-turbo-value')!.textContent = miniTurboMeter.ariaValueNow = String statBlock.miniTurbo
    invulnMeter.style.setProperty '--meter-length', `${statBlock.invuln * 100/6}%`
    document.getElementById('invuln-value')!.textContent = invulnMeter.ariaValueNow = String statBlock.invuln

updatePreview()

[characterDropdown, kartDropdown, wheelDropdown, gliderDropdown].forEach .addEventListener 'change', updatePreview, { +passive }

function setPreviewedKart(character: string, kart: string, wheels: string, glider: string)
    characterDropdown.selectedIndex = Array::findIndex.call characterDropdown.options, .dataset.name is character
    kartDropdown.selectedIndex = Array::findIndex.call kartDropdown.options, .dataset.name is kart
    wheelDropdown.selectedIndex = Array::findIndex.call wheelDropdown.options, .dataset.name is wheels
    gliderDropdown.selectedIndex = Array::findIndex.call gliderDropdown.options, .dataset.name is glider
    updatePreview()

menu := document.querySelector('menu')!
let currMenu?: string

installLimitListener := (name: 'characters' | 'karts' | 'wheels' | 'gliders') =>
    document.getElementById(`limit-${name}`)!
        .addEventListener
            'click',
            :void =>
                menu.innerHTML = ''
                if currMenu is name
                    currMenu = undefined
                else
                    // Due to the structure of the data, what I'm doing is safe, but TS can't prove it.
                    // Unfortunately, I need to remind it of such no fewer than five times.

                    currMenu = name
                    // @ts-ignore shut up
                    totalNames: string[] := data[name].flatMap &[name]
                    // @ts-ignore shut up
                    indices := data[name].flatMap (el, i) => Array<number>(el[name].#).fill i
                    // @ts-ignore shut up
                    includedNames: string[] := limitedData[name].flatMap &[name]

                    total := totalNames.#
                    selectedCount .= includedNames.#
                    allCheckbox := document.createElement 'input'
                        ||> .type = 'checkbox'
                        ||> .addEventListener
                            'change'
                            ->
                                if @checked
                                    menu.querySelectorAll<HTMLInputElement> 'input[type="checkbox"]'
                                        .forEach .checked = true
                                    // @ts-ignore It's just not correlating the LHS (&) with the RHS (|)
                                    limitedData[name] = structuredClone data[name]
                                    selectedCount = total
                                else
                                    menu.querySelectorAll<HTMLInputElement> 'input[type="checkbox"]'
                                        .forEach .checked = false
                                    // @ts-ignore shut up
                                    limitedData[name].forEach &[name] = []
                                    selectedCount = 0
                            { +passive }
                        |> menu.appendChild

                    switch selectedCount
                        when 0
                            allCheckbox.checked = false
                        when total
                            allCheckbox.checked = true
                        else
                            allCheckbox.indeterminate = true

                    document.createElement 'label'
                        ||> .textContent = 'All'
                        ||> .htmlFor = allCheckbox.id = 'checkbox-all'
                        |> menu.appendChild

                    for each currName, i of totalNames
                        li := document.createElement 'li'
                        checkBox := document.createElement 'input' ||> .type = 'checkbox'
                        checkBox.checked = currName is in includedNames
                        index := indices[i]
                        checkBox.addEventListener 'change', ->
                            // @ts-ignore shut up
                            limitedNames: string[] := limitedData[name][index][name]
                            if @checked
                                limitedNames.push currName
                                ++selectedCount
                                if selectedCount is total
                                    // why do I have to do both
                                    allCheckbox.indeterminate = false
                                    allCheckbox.checked = true
                                else
                                    allCheckbox.indeterminate = true
                            else
                                idx := limitedNames.indexOf currName
                                if idx >= 0
                                    limitedNames.splice idx, 1
                                    --selectedCount
                                    if selectedCount is 0
                                        allCheckbox.indeterminate = false
                                        allCheckbox.checked = false
                                    else
                                        allCheckbox.indeterminate = true

                        label := document.createElement 'label'
                        label.htmlFor = checkBox.id = `checkbox-${currName}`
                        label.textContent = currName.replace rgx, ' $&'

                        li.appendChild checkBox
                        li.appendChild label
                        menu.appendChild li
            { +passive }

(['characters', 'karts', 'wheels', 'gliders'] as const).forEach installLimitListener

form.addEventListener
    'reset'
    =>
        limitedData = structuredClone data
        menu.innerHTML = ''
        currMenu = undefined
    { +passive }

document.querySelectorAll<HTMLElement> '.info'
    .forEach (el) =>
        el.addEventListener
            'click'
            -> alert @title
            { +passive }
        el.addEventListener
            'keypress'
            (e) -> if e.key is 'Enter' or e.key is ' ' then alert @title
            { +passive }
